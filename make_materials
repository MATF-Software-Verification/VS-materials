#!/bin/bash

function ensure_md_trailing_newline ()
{
    # Ensure every md file has 2 trailing newlines
    for f in $(fd -e md -d 1) ; do
        lastline=$(tail -n 1 $f; echo x); lastline=${lastline%x}
        if [ "${lastline: -1}" != $'\n' ]; then
            echo "styling: $f"
            echo >> $f
            echo >> $f
        fi
    done
}

function indent_c_cpp_files_recursively ()
{
    # Indent C files and remove temp files
    for f in $(fd -e c -e cpp -e h -e hpp); do
        echo "indenting: $f"
        clang-format --style="{BasedOnStyle: llvm, IndentWidth: 4}" -i $f
        rm -f "$f~"
    done
}

set -e;

readme="README.md"
materials="MATERIALS.md"
installing="INSTALLING.md"

rm $materials $installing
touch $materials $installing

materials_path=$(realpath "$materials")
installing_path=$(realpath "$installing")

function collect_materials ()
{
    if [ ! -f .mignore ] && [ ! -f .mroot ]; then
        ensure_md_trailing_newline
    fi

    if [ -f $readme ]; then
        echo "including: $(realpath $readme)"
        cat $readme >> $materials_path
    fi
    if [ -f $installing ]; then
        echo "including: $(realpath $installing)"
        if [ $(realpath $installing) != $installing_path ]; then
            cat $installing >> $installing_path
        fi
    fi

    if [ ! -f .mignore ]; then
        for d in *; do
            if [ -d $d ]; then
                echo "scanning $d..."
                cd $d
                collect_materials
                cd ..
            fi
        done
    fi
}

indent_c_cpp_files_recursively
echo >> $installing_path
echo >> $installing_path
echo "# Instalacije" >> $installing_path
collect_materials
cat $installing_path >> $materials_path

set +e;
echo 
echo "creating pdf..."
pandoc MATERIALS.md \
    -o MATERIALS.pdf \
    -f gfm \
    -N \
    --variable "geometry=margin=1.2in" \
    --variable fontsize=12pt \
    --variable version=2.0 \
    --pdf-engine=xelatex \
    --include-in-header _pandoc/header.tex \
    --include-in-header _pandoc/code.tex \
    --highlight-style _pandoc/pygments.theme \
    -V colorlinks=true \
    --toc -V toc-title="Sadr≈æaj" \
    -V 'monofont:DejaVuSansMono' \
    # -V 'mainfont:DejaVuSerif.ttf' \
    # -V 'sansfont:DejaVuSans.ttf' \
    # -V 'mathfont:texgyredejavu-math.otf' \
exc=$?

echo 
echo 
if [ $exc -eq 0 ]; then
    echo "SUCCESS"
else
    echo "ERROR code $exc"
    echo "NOTE: if you see verbatim errors, make sure to have qualified codeblocks with language, e.g., \`\`\`txt instead of just \'\'\'"
fi

